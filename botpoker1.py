from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import random
import asyncio
import nest_asyncio
import re
from itertools import combinations
nest_asyncio.apply()
TOKEN = "8185411618:AAEdPhiBivpXkvqDDcNbJShJLgHdX43JFFg"
SUITS = ['‚ô†Ô∏è', '‚ô•Ô∏è', '‚ô¶Ô∏è', '‚ô£Ô∏è']
RANKS = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
RANK_VALUES = {
    '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9,
    '10': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14
}
deck = [rank + suit for suit in SUITS for rank in RANKS]
keyboard = [
    ['/start', '/rules'],
    ['/deal', '/flop'],
    ['/turn', '/river'],
    ['/show', '/combo'],
    ['/strategy', '/faq']
]
reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=False)
player_hand = []
community_cards = {
    'flop': [],
    'turn': None,
    'river': None
}
current_stage = "none"
def extract_rank(card):
    match = re.match(r"([2-9]|10|[JQKA])[‚ô†‚ô•‚ô¶‚ô£‚ô†Ô∏è‚ô•Ô∏è‚ô¶Ô∏è‚ô£Ô∏è]", card)
    return match.group(1) if match else None
def evaluate_hand(cards):
    ranks = []
    for card in cards:
        rank = extract_rank(card)
        if rank and rank in RANK_VALUES:
            ranks.append(RANK_VALUES[rank])
    if len(ranks) < 5:
        return "—Å—Ç–∞—Ä—à–∞ –∫–∞—Ä—Ç–∞"
    numeric_ranks = sorted(ranks, reverse=True)
    unique_ranks = sorted(set(numeric_ranks), reverse=True)
    rank_counts = {r: numeric_ranks.count(r) for r in unique_ranks}
    count_rank = {}
    for r, c in rank_counts.items():
        count_rank.setdefault(c, []).append(r)
    suits = [card[-1] for card in cards if card[-1] in SUITS]
    is_flush = len(set(suits)) == 1
    is_straight = len(unique_ranks) == 5 and max(unique_ranks) - min(unique_ranks) == 4
    if sorted(unique_ranks) == [10, 11, 12, 13, 14] and is_flush:
        return "—Ñ–ª–µ—à-—Ä–æ—è–ª—å"
    elif is_straight and is_flush:
        return "—Å—Ç—Ä—ñ—Ç-—Ñ–ª–µ—à"
    elif 4 in count_rank:
        return "–∫–∞—Ä–µ"
    elif 3 in count_rank and 2 in count_rank:
        return "—Ñ—É–ª-—Ö–∞—É—Å"
    elif is_flush:
        return "—Ñ–ª–µ—à"
    elif is_straight:
        return "—Å—Ç—Ä—ñ—Ç"
    elif 3 in count_rank:
        return "—Ç—Ä—ñ–π–∫–∞"
    elif len(count_rank.get(2, [])) >= 2:
        return "–¥–≤—ñ –ø–∞—Ä–∏"
    elif 2 in count_rank:
        return "–ø–∞—Ä–∞"
    else:
        return "—Å—Ç–∞—Ä—à–∞ –∫–∞—Ä—Ç–∞"
async def deal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global player_hand, community_cards, current_stage
    random.shuffle(deck)
    player_hand = deck[:2]
    community_cards = {
        'flop': deck[2:5],
        'turn': deck[5],
        'river': deck[6]
    }
    current_stage = "preflop"
    await update.message.reply_text(f"üé¥ –¢–≤–æ—è —Ä—É–∫–∞: {', '.join(player_hand)}")
    await update.message.reply_text("–ü–∏—à—ñ—Ç—å /flop, —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ 3 –∫–∞—Ä—Ç–∏ –Ω–∞ —Å—Ç–æ–ª—ñ.")
async def flop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global current_stage
    if current_stage != "preflop":
        await update.message.reply_text("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É —Ä–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ä—Ç–∏ (/deal)")
        return
    current_stage = "flop"
    cards = community_cards['flop']
    await update.message.reply_text(f"üÉè –ö–∞—Ä—Ç–∏ –Ω–∞ —Å—Ç–æ–ª—ñ (flop): {', '.join(cards)}")
    await update.message.reply_text("–ü–∏—à—ñ—Ç—å /turn, —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ —â–µ –æ–¥–Ω—É –∫–∞—Ä—Ç—É.")
async def turn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global current_stage
    if current_stage != "flop":
        await update.message.reply_text("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –≤—ñ–¥–∫—Ä–∏–π—Ç–µ flop.")
        return
    current_stage = "turn"
    card = community_cards['turn']
    await update.message.reply_text(f"üÉè –ö–∞—Ä—Ç–∞ turn: {card}")
    await update.message.reply_text("–ü–∏—à—ñ—Ç—å /river, —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é –∫–∞—Ä—Ç—É.")
async def river(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global current_stage
    if current_stage != "turn":
        await update.message.reply_text("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –≤—ñ–¥–∫—Ä–∏–π—Ç–µ turn.")
        return
    current_stage = "river"
    card = community_cards['river']
    await update.message.reply_text(f"üÉè –ö–∞—Ä—Ç–∞ river: {card}")
    await update.message.reply_text("üèÅ –û—Å—å —É—Å—ñ –∫–∞—Ä—Ç–∏. –ù–∞–ø–∏—à—ñ—Ç—å /show, —â–æ–± –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—é.")
async def show(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global player_hand, community_cards, current_stage
    if current_stage == "none":
        await update.message.reply_text("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É —Ä–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ä—Ç–∏ (/deal)")
        return
    combined = player_hand + community_cards['flop']
    if current_stage in ["turn", "river"]:
        combined.append(community_cards['turn'])
    if current_stage == "river":
        combined.append(community_cards['river'])
    best_combo = "—Å—Ç–∞—Ä—à–∞ –∫–∞—Ä—Ç–∞"
    best_score = -1
    for combo in combinations(combined, 5):
        combo_list = list(combo)
        combo_name = evaluate_hand(combo_list)
        score = get_combo_score(combo_name)
        if score > best_score:
            best_score = score
            best_combo = combo_name
    await update.message.reply_text(f"üÉè –¢–≤–æ—è —Ä—É–∫–∞ + —Å—Ç–æ–ª—ñ: {', '.join(player_hand + community_cards['flop'])}")
    if current_stage in ["turn", "river"]:
        await update.message.reply_text(f" + {community_cards['turn']}")
    if current_stage == "river":
        await update.message.reply_text(f" + {community_cards['river']}")
    await update.message.reply_text(f"üèÜ –¢–≤–æ—è –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è: {best_combo.capitalize()}")
def get_combo_score(combo):
    scores = {
        "—Ñ–ª–µ—à-—Ä–æ—è–ª—å": 10,
        "—Å—Ç—Ä—ñ—Ç-—Ñ–ª–µ—à": 9,
        "–∫–∞—Ä–µ": 8,
        "—Ñ—É–ª-—Ö–∞—É—Å": 7,
        "—Ñ–ª–µ—à": 6,
        "—Å—Ç—Ä—ñ—Ç": 5,
        "—Ç—Ä—ñ–π–∫–∞": 4,
        "–¥–≤—ñ –ø–∞—Ä–∏": 3,
        "–ø–∞—Ä–∞": 2,
        "—Å—Ç–∞—Ä—à–∞ –∫–∞—Ä—Ç–∞": 1
    }
    return scores.get(combo, 0)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global reply_markup
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –ø–æ–∫–µ—Ä-–±–æ—Ç. –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –Ω–∞–≤—á–∏—Ç–∏—Å—è –≥—Ä–∞—Ç–∏ –≤ –ø–æ–∫–µ—Ä!\n\n"
        "–û–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂—á–µ –∞–±–æ –Ω–∞–ø–∏—à–∏ –≤—Ä—É—á–Ω—É.",
        reply_markup=reply_markup
    )
async def rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rules_text = (
        "üéØ –û—Å–Ω–æ–≤–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–∫–µ—Ä—É (—Ç–µ—Ö–∞—Å—å–∫–∏–π —Ö–æ–ª–¥–µ–º):\n"
        "1. –£ –∫–æ–∂–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è –ø–æ 2 –∑–∞–∫—Ä–∏—Ç—ñ –∫–∞—Ä—Ç–∏.\n"
        "2. –ù–∞ —Å—Ç–æ–ª—ñ 5 —Å–ø—ñ–ª—å–Ω–∏—Ö –∫–∞—Ä—Ç (flop, turn, river).\n"
        "3. –ú–µ—Ç–∞ ‚Äî —Å–∫–ª–∞—Å—Ç–∏ –Ω–∞–π–∫—Ä–∞—â—É 5-–∫–∞—Ä—Ç–Ω—É –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—é.\n"
        "4. –ì—Ä–∞–≤—Ü—ñ –º–æ–∂—É—Ç—å: —á–µ–∫–∞—Ç–∏, –ø–∞—Å—É–≤–∞—Ç–∏, –≤–∏–∫–ª–∏–∫–∞—Ç–∏, –ø—ñ–¥–≤–∏—â—É–≤–∞—Ç–∏.\n"
        "5. –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å ‚Äî —Ç–æ–π, —É –∫–æ–≥–æ –∫—Ä–∞—â–∞ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è –∞–±–æ —Ö—Ç–æ –∑–∞–ª–∏—à–∏–≤—Å—è –æ–¥–∏–Ω."
    )
    await update.message.reply_text(rules_text)
async def combo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    combo_text = (
        "üèÜ –ö–æ–º–±—ñ–Ω–∞—Ü—ñ—ó –≤ –ø–æ–∫–µ—Ä—ñ (–≤—ñ–¥ –Ω–∞–π–∫—Ä–∞—â–æ—ó –¥–æ –Ω–∞–π–≥—ñ—Ä—à–æ—ó):\n"
        "1. –§–ª–µ—à-—Ä–æ—è–ª—å ‚Äî 10, –í, –î, –ö, –ê –æ–¥–Ω—ñ—î—ó –º–∞—Å—Ç—ñ\n"
        "2. –°—Ç—Ä—ñ—Ç-—Ñ–ª–µ—à ‚Äî 5 –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–∏—Ö –∫–∞—Ä—Ç –æ–¥–Ω—ñ—î—ó –º–∞—Å—Ç—ñ\n"
        "3. –ö–∞—Ä–µ ‚Äî 4 –æ–¥–Ω–∞–∫–æ–≤—ñ –∫–∞—Ä—Ç–∏\n"
        "4. –§—É–ª-—Ö–∞—É—Å ‚Äî —Ç—Ä—ñ–π–∫–∞ + –ø–∞—Ä–∞\n"
        "5. –§–ª–µ—à ‚Äî 5 –∫–∞—Ä—Ç –æ–¥–Ω—ñ—î—ó –º–∞—Å—Ç—ñ\n"
        "6. –°—Ç—Ä—ñ—Ç ‚Äî 5 –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–∏—Ö –∫–∞—Ä—Ç\n"
        "7. –¢—Ä—ñ–π–∫–∞ ‚Äî 3 –æ–¥–Ω–∞–∫–æ–≤—ñ –∫–∞—Ä—Ç–∏\n"
        "8. –î–≤—ñ –ø–∞—Ä–∏\n"
        "9. –û–¥–Ω–∞ –ø–∞—Ä–∞\n"
        "10. –°—Ç–∞—Ä—à–∞ –∫–∞—Ä—Ç–∞"
    )
    await update.message.reply_text(combo_text)
async def strategy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    strategy_text = (
        "üß† –ë–∞–∑–æ–≤–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è –¥–ª—è –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—ñ–≤:\n"
        "1. –ì—Ä–∞–π –ª–∏—à–µ —Å–∏–ª—å–Ω—ñ –ø–æ—á–∞—Ç–∫–æ–≤—ñ —Ä—É–∫–∏: AA, KK, QQ, AK, JJ, AQ.\n"
        "2. –°–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞–π –∑–∞ —ñ–Ω—à–∏–º–∏ –≥—Ä–∞–≤—Ü—è–º–∏.\n"
        "3. –ù–µ –≤–∏–ø–ª–∞—á—É–≤–∞–π –≤–µ–ª–∏–∫—ñ —Å—É–º–∏ –±–µ–∑ —Å–∏–ª—å–Ω–æ—ó —Ä—É–∫–∏.\n"
        "4. –í–∏–≤—á–∏ –ø–æ–∑–∏—Ü—ñ—ó –∑–∞ —Å—Ç–æ–ª–æ–º (—á–µ–º–ø—ñ–æ–Ω, –±–∞—Ç–æ–Ω, –±–ª–∞–π–Ω–¥–∏).\n"
        "5. –ù–µ –≥—Ä–∞–π –≤—ñ–¥—Ä–∞–∑—É –Ω–∞ –≤–µ–ª–∏–∫—ñ —Å—É–º–∏ ‚Äî –ø—Ä–∞–∫—Ç–∏–∫—É–π—Å—è –Ω–∞ –º—ñ–∫—Ä–æ–ª—ñ–º—ñ—Ç–∞—Ö."
    )
    await update.message.reply_text(strategy_text)
async def faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    faq_text = (
        "‚ùì –ß–∞—Å—Ç—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:\n\n"
        "Q: –Ø–∫ –≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è –ø–µ—Ä–µ–º–æ–∂–µ—Ü—å?\n"
        "A: –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å ‚Äî —Ç–æ–π, —É –∫–æ–≥–æ –∫—Ä–∞—â–∞ 5-–∫–∞—Ä—Ç–Ω–∞ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è –∞–±–æ —Ö—Ç–æ –∑–∞–ª–∏—à–∏–≤—Å—è –æ–¥–∏–Ω.\n\n"
        "Q: –©–æ —Ç–∞–∫–µ –±–ª–∞–π–Ω–¥–∏?\n"
        "A: –û–±–æ–≤'—è–∑–∫–æ–≤—ñ —Å—Ç–∞–≤–∫–∏, —è–∫—ñ —Ä–æ–±–ª—è—Ç—å –≥—Ä–∞–≤—Ü—ñ –¥–æ –ø–æ—á–∞—Ç–∫—É –∫–æ–∂–Ω–æ—ó —Ä—É–∫–∏.\n\n"
        "Q: –Ø–∫ –≤–∏–≥—Ä–∞—Ç–∏ —É –Ω–æ–≤–∞—á–∫–∞?\n"
        "A: –ù–µ –≥—Ä–∞–π –∫–æ–∂–Ω—É —Ä—É–∫—É, —Å—Ç–µ–∂ –∑–∞ —Å—Ç–∞–≤–∫–∞–º–∏, –Ω–µ –≤—Ç—Ä–∞—á–∞–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –±–∞–Ω–∫–æ–º."
    )
    await update.message.reply_text(faq_text)
async def tip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    poker_tips = [
        "–ù–µ –≥—Ä–∞–π –∫–æ–∂–Ω—É —Ä—É–∫—É ‚Äî –æ–±–∏—Ä–∞–π –ª–∏—à–µ —Å–∏–ª—å–Ω—ñ.",
        "–ü–∞–º'—è—Ç–∞–π: –ø–æ–∑–∏—Ü—ñ—è –∑–∞ —Å—Ç–æ–ª–æ–º –º–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è.",
        "–ë—É–¥—å —É–≤–∞–∂–Ω–∏–º –¥–æ —Å—Ç–∞–≤–æ–∫ —Å—É–ø–µ—Ä–Ω–∏–∫—ñ–≤.",
        "–ù–µ –≤–∏–ø–ª–∞—á—É–≤–∞–π –±–µ–∑ —Å–∏–ª—å–Ω–æ—ó —Ä—É–∫–∏."
    ]
    tip = random.choice(poker_tips)
    await update.message.reply_text(f"üí° –ü–æ—Ä–∞–¥–∞: {tip}")
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    exception = context.error
    if isinstance(exception, Conflict):
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üõë –ë–æ—Ç –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ –∑–∞–ø—É—â–µ–Ω–æ –ª–∏—à–µ –æ–¥–∏–Ω –µ–∫–∑–µ–º–ø–ª—è—Ä."
        )
    elif isinstance(exception, KeyError):
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –∫–∞—Ä—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
        )
    else:
        print(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞: {exception}")
async def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("deal", deal))
    app.add_handler(CommandHandler("flop", flop))
    app.add_handler(CommandHandler("turn", turn))
    app.add_handler(CommandHandler("river", river))
    app.add_handler(CommandHandler("show", show))
    app.add_handler(CommandHandler("rules", rules))
    app.add_handler(CommandHandler("combo", combo))
    app.add_handler(CommandHandler("strategy", strategy))
    app.add_handler(CommandHandler("faq", faq))
    app.add_handler(CommandHandler("tip", tip))
    app.add_error_handler(error_handler)
    await app.run_polling()
def test_evaluate_hand():
    test_cases = [
        (["10‚ô†Ô∏è", "J‚ô†Ô∏è", "Q‚ô†Ô∏è", "K‚ô†Ô∏è", "A‚ô†Ô∏è"], "—Ñ–ª–µ—à-—Ä–æ—è–ª—å"),
        (["8‚ô•Ô∏è", "9‚ô•Ô∏è", "10‚ô•Ô∏è", "J‚ô•Ô∏è", "Q‚ô•Ô∏è"], "—Å—Ç—Ä—ñ—Ç-—Ñ–ª–µ—à"),
        (["K‚ô†Ô∏è", "K‚ô•Ô∏è", "K‚ô¶Ô∏è", "K‚ô£Ô∏è", "2‚ô†Ô∏è"], "–∫–∞—Ä–µ"),
        (["A‚ô†Ô∏è", "A‚ô•Ô∏è", "A‚ô¶Ô∏è", "Q‚ô£Ô∏è", "Q‚ô†Ô∏è"], "—Ñ—É–ª-—Ö–∞—É—Å"),
        (["2‚ô†Ô∏è", "5‚ô†Ô∏è", "7‚ô†Ô∏è", "J‚ô†Ô∏è", "K‚ô†Ô∏è"], "—Ñ–ª–µ—à"),
        (["6‚ô†Ô∏è", "7‚ô•Ô∏è", "8‚ô¶Ô∏è", "9‚ô£Ô∏è", "10‚ô†Ô∏è"], "—Å—Ç—Ä—ñ—Ç"),
        (["Q‚ô†Ô∏è", "Q‚ô•Ô∏è", "Q‚ô¶Ô∏è", "7‚ô£Ô∏è", "2‚ô†Ô∏è"], "—Ç—Ä—ñ–π–∫–∞"),
        (["J‚ô†Ô∏è", "J‚ô•Ô∏è", "5‚ô¶Ô∏è", "5‚ô†Ô∏è", "A‚ô£Ô∏è"], "–¥–≤—ñ –ø–∞—Ä–∏"),
        (["10‚ô†Ô∏è", "10‚ô•Ô∏è", "3‚ô¶Ô∏è", "6‚ô£Ô∏è", "K‚ô†Ô∏è"], "–ø–∞—Ä–∞"),
        (["A‚ô†Ô∏è", "K‚ô•Ô∏è", "Q‚ô¶Ô∏è", "9‚ô£Ô∏è", "2‚ô†Ô∏è"], "—Å—Ç–∞—Ä—à–∞ –∫–∞—Ä—Ç–∞"),
    ]

    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π:")
    for cards, expected in test_cases:
        result = evaluate_hand(cards)
        print(f"{' '.join(cards)} ‚Üí {result} ‚Äî {'‚úÖ OK' if result == expected else '‚ùå –ü–æ–º–∏–ª–∫–∞'}")
if __name__ == '__main__':
    test_evaluate_hand()
    asyncio.run(main())